{
    "sourceFile": "src/main/java/io/sfer/xxx/Controller/SellerController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1651691092148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651691107282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,9 @@\n     productDTO.setImage(imgUUID);\r\n \r\n     Product product = new Product();\r\n     product.setSeller_id(productDTO.getSeller_id());\r\n+\t\t\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n     HttpClient client = HttpClient.newHttpClient();\r\n"
                },
                {
                    "date": 1651691113079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,11 @@\n     productDTO.setImage(imgUUID);\r\n \r\n     Product product = new Product();\r\n     product.setSeller_id(productDTO.getSeller_id());\r\n+\t\tproduct.setTitle(productDTO.getTitle());\r\n+\t\tproduct.setChapter(productDTO.getChapter());\r\n+\t\tproduct.setPage_number(productDTO.getPage_number());\r\n \t\t\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n"
                },
                {
                    "date": 1651691118189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,11 @@\n     product.setSeller_id(productDTO.getSeller_id());\r\n \t\tproduct.setTitle(productDTO.getTitle());\r\n \t\tproduct.setChapter(productDTO.getChapter());\r\n \t\tproduct.setPage_number(productDTO.getPage_number());\r\n+\t\tproduct.setAuthor(productDTO.getAuthor());\r\n+\t\tproduct.setPublisher(productDTO.getPublisher());\r\n+\t\tproduct.setQuantity(productDTO.getQuantity());\r\n \t\t\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n"
                },
                {
                    "date": 1651691123894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,11 @@\n \t\tproduct.setPage_number(productDTO.getPage_number());\r\n \t\tproduct.setAuthor(productDTO.getAuthor());\r\n \t\tproduct.setPublisher(productDTO.getPublisher());\r\n \t\tproduct.setQuantity(productDTO.getQuantity());\r\n+\t\tproduct.setQuality(productDTO.getQuality());\r\n+\t\tproduct.setPrice(productDTO.getPrice());\r\n+\t\tproduct.setDescription(productDTO.getDescription());\r\n \t\t\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n"
                },
                {
                    "date": 1651691129114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,11 @@\n \t\tproduct.setQuantity(productDTO.getQuantity());\r\n \t\tproduct.setQuality(productDTO.getQuality());\r\n \t\tproduct.setPrice(productDTO.getPrice());\r\n \t\tproduct.setDescription(productDTO.getDescription());\r\n-\t\t\r\n+\t\tproduct.setImage(productDTO.getImage());\r\n+\t\tproduct.setPublish_date(productDTO.getPublish_date());\r\n+\t\tproduct.setCategoryIds(productCategoryIdList);\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n     HttpClient client = HttpClient.newHttpClient();\r\n"
                },
                {
                    "date": 1651691148365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,8 @@\n \r\n   @PostMapping(\"/seller/manageProducts/add\")\r\n   public String sellerAddProductPost(\r\n     @ModelAttribute ProductDTO productDTO,\r\n-    @ModelAttribute ArrayList<Integer> productCategoryIdList,\r\n     @RequestParam(\"productImage\") MultipartFile file,\r\n     @RequestParam(\"imgName\") String imgName\r\n   )\r\n     throws IOException, JsonProcessingException, InterruptedException {\r\n"
                },
                {
                    "date": 1651691154059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,8 @@\n \t\tproduct.setPrice(productDTO.getPrice());\r\n \t\tproduct.setDescription(productDTO.getDescription());\r\n \t\tproduct.setImage(productDTO.getImage());\r\n \t\tproduct.setPublish_date(productDTO.getPublish_date());\r\n-\t\tproduct.setCategoryIds(productCategoryIdList);\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n     HttpClient client = HttpClient.newHttpClient();\r\n"
                },
                {
                    "date": 1651691194814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,19 +101,19 @@\n     productDTO.setImage(imgUUID);\r\n \r\n     Product product = new Product();\r\n     product.setSeller_id(productDTO.getSeller_id());\r\n-\t\tproduct.setTitle(productDTO.getTitle());\r\n-\t\tproduct.setChapter(productDTO.getChapter());\r\n-\t\tproduct.setPage_number(productDTO.getPage_number());\r\n-\t\tproduct.setAuthor(productDTO.getAuthor());\r\n-\t\tproduct.setPublisher(productDTO.getPublisher());\r\n-\t\tproduct.setQuantity(productDTO.getQuantity());\r\n-\t\tproduct.setQuality(productDTO.getQuality());\r\n-\t\tproduct.setPrice(productDTO.getPrice());\r\n-\t\tproduct.setDescription(productDTO.getDescription());\r\n-\t\tproduct.setImage(productDTO.getImage());\r\n-\t\tproduct.setPublish_date(productDTO.getPublish_date());\r\n+    product.setTitle(productDTO.getTitle());\r\n+    product.setChapter(productDTO.getChapter());\r\n+    product.setPage_number(productDTO.getPage_number());\r\n+    product.setAuthor(productDTO.getAuthor());\r\n+    product.setPublisher(productDTO.getPublisher());\r\n+    product.setQuantity(productDTO.getQuantity());\r\n+    product.setQuality(productDTO.getQuality());\r\n+    product.setPrice(productDTO.getPrice());\r\n+    product.setDescription(productDTO.getDescription());\r\n+    product.setImage(productDTO.getImage());\r\n+    product.setPublish_date(productDTO.getPublish_date());\r\n \r\n     String requestBody = new ObjectMapper().writeValueAsString(product);\r\n     System.out.println(requestBody);\r\n     HttpClient client = HttpClient.newHttpClient();\r\n"
                }
            ],
            "date": 1651691092148,
            "name": "Commit-0",
            "content": "package io.sfer.xxx.Controller;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport io.sfer.xxx.Model.*;\r\nimport io.sfer.xxx.dto.ProductDTO;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URI;\r\nimport java.net.URL;\r\nimport java.net.URLConnection;\r\nimport java.net.http.HttpClient;\r\nimport java.net.http.HttpRequest;\r\nimport java.net.http.HttpResponse;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.springframework.boot.configurationprocessor.json.JSONObject;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\n@Controller\r\npublic class SellerController {\r\n\r\n  public static String uploadDir =\r\n    System.getProperty(\"user.dir\") + \"/src/main/resources/static/productImages\";\r\n\r\n  @GetMapping(\"/seller/manageProducts\")\r\n  public String sellerGetAllProduct(Model model)\r\n    throws IOException, InterruptedException, JsonProcessingException {\r\n    HttpClient client = HttpClient.newHttpClient();\r\n    HttpRequest request = HttpRequest\r\n      .newBuilder()\r\n      .uri(URI.create(\"http://localhost:8080/apis/products\"))\r\n      .build();\r\n    HttpResponse<String> response = client.send(\r\n      request,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n    String jsonStr = response.body();\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    List<Product> productList = objectMapper.readValue(\r\n      jsonStr,\r\n      new TypeReference<List<Product>>() {}\r\n    );\r\n    System.out.println(productList);\r\n    model.addAttribute(\"productList\", productList);\r\n    return \"seller/manageProduct\";\r\n  }\r\n\r\n  @GetMapping(\"/seller/manageProducts/add\")\r\n  public String sellerAddProductGet(Model model)\r\n    throws IOException, InterruptedException, JsonProcessingException {\r\n    model.addAttribute(\"newproduct\", new ProductDTO());\r\n    HttpClient clientCategory = HttpClient.newHttpClient();\r\n    HttpRequest requestCategory = HttpRequest\r\n      .newBuilder()\r\n      .uri(URI.create(\"http://localhost:8080/apis/categories\"))\r\n      .build();\r\n    HttpResponse<String> response = clientCategory.send(\r\n      requestCategory,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n    String jsonStr = response.body();\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    List<Category> categoryList = objectMapper.readValue(\r\n      jsonStr,\r\n      new TypeReference<List<Category>>() {}\r\n    );\r\n    System.out.println(categoryList);\r\n    model.addAttribute(\"categoryList\", categoryList);\r\n    return \"seller/addProduct\";\r\n  }\r\n\r\n  @PostMapping(\"/seller/manageProducts/add\")\r\n  public String sellerAddProductPost(\r\n    @ModelAttribute ProductDTO productDTO,\r\n    @ModelAttribute ArrayList<Integer> productCategoryIdList,\r\n    @RequestParam(\"productImage\") MultipartFile file,\r\n    @RequestParam(\"imgName\") String imgName\r\n  )\r\n    throws IOException, JsonProcessingException, InterruptedException {\r\n    productDTO.setSeller_id(1);\r\n    String imgUUID;\r\n    if (!file.isEmpty()) {\r\n      imgUUID = file.getOriginalFilename();\r\n      Path fileNameAndPath = Paths.get(uploadDir, imgUUID);\r\n      Files.write(fileNameAndPath, file.getBytes());\r\n    } else {\r\n      imgUUID = imgName;\r\n    }\r\n    productDTO.setImage(imgUUID);\r\n\r\n    Product product = new Product();\r\n    product.setSeller_id(productDTO.getSeller_id());\r\n\r\n    String requestBody = new ObjectMapper().writeValueAsString(product);\r\n    System.out.println(requestBody);\r\n    HttpClient client = HttpClient.newHttpClient();\r\n    HttpRequest request = HttpRequest\r\n      .newBuilder()\r\n      .header(\"content-type\", \"application/json\")\r\n      .uri(URI.create(\"http://localhost:8080/apis/products\"))\r\n      .POST(HttpRequest.BodyPublishers.ofString(requestBody))\r\n      .build();\r\n\r\n    HttpResponse<String> response = client.send(\r\n      request,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n\r\n    System.out.println(response.body());\r\n    System.out.println(productCategoryIdList);\r\n    return \"redirect:/seller/manageProducts/add\";\r\n  }\r\n\r\n  @GetMapping(\"/seller/manageProducts/edit\")\r\n  public String sellerUpdateProductGet(@RequestParam Integer id, Model model)\r\n    throws IOException, InterruptedException, JsonProcessingException {\r\n    HttpClient clientProduct = HttpClient.newHttpClient();\r\n    HttpRequest requestProduct = HttpRequest\r\n      .newBuilder()\r\n      .uri(URI.create(\"http://localhost:8080/apis/products/\" + id))\r\n      .build();\r\n    HttpResponse<String> responseProduct = clientProduct.send(\r\n      requestProduct,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n    String jsonStrProduct = responseProduct.body();\r\n    ObjectMapper objectMapperProduct = new ObjectMapper();\r\n    Product product = objectMapperProduct.readValue(\r\n      jsonStrProduct,\r\n      Product.class\r\n    );\r\n    System.out.println(product);\r\n    model.addAttribute(\"newproduct\", product);\r\n\r\n    HttpClient clientCategory = HttpClient.newHttpClient();\r\n    HttpRequest requestCategory = HttpRequest\r\n      .newBuilder()\r\n      .uri(URI.create(\"http://localhost:8080/apis/categories\"))\r\n      .build();\r\n    HttpResponse<String> response = clientCategory.send(\r\n      requestCategory,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n    String jsonStr = response.body();\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    List<Category> categoryList = objectMapper.readValue(\r\n      jsonStr,\r\n      new TypeReference<List<Category>>() {}\r\n    );\r\n    System.out.println(categoryList);\r\n    model.addAttribute(\"categoryList\", categoryList);\r\n    return \"seller/addProduct\";\r\n  }\r\n\r\n  @PostMapping(\"/seller/manageProducts/edit\")\r\n  public String sellerUpdateProductPost(\r\n    @RequestParam Integer id,\r\n    @ModelAttribute Product product,\r\n    @RequestParam(\"productImage\") MultipartFile file,\r\n    @RequestParam(\"imgName\") String imgName\r\n  )\r\n    throws IOException, InterruptedException, JsonProcessingException {\r\n    String imgUUID;\r\n    if (!file.isEmpty()) {\r\n      imgUUID = file.getOriginalFilename();\r\n      Path fileNameAndPath = Paths.get(uploadDir, imgUUID);\r\n      Files.write(fileNameAndPath, file.getBytes());\r\n    } else {\r\n      imgUUID = imgName;\r\n    }\r\n    product.setImage(imgUUID);\r\n    String requestBody = new ObjectMapper().writeValueAsString(product);\r\n    System.out.println(requestBody);\r\n    HttpClient client = HttpClient.newHttpClient();\r\n    HttpRequest request = HttpRequest\r\n      .newBuilder()\r\n      .header(\"content-type\", \"application/json\")\r\n      .uri(URI.create(\"http://localhost:8080/apis/products/\" + id))\r\n      .PUT(HttpRequest.BodyPublishers.ofString(requestBody))\r\n      .build();\r\n\r\n    HttpResponse<String> response = client.send(\r\n      request,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n\r\n    System.out.println(response.body());\r\n    return \"redirect:/seller/manageProducts\";\r\n  }\r\n\r\n  @GetMapping(\"/seller/dashboard\")\r\n  public String sellerDashboard() {\r\n    return \"seller/dashboard\";\r\n  }\r\n\r\n  @GetMapping(\"/seller/store\")\r\n  public String sellerStore() {\r\n    return \"seller/store\";\r\n  }\r\n\r\n  @GetMapping(\"/seller/manageOrders\")\r\n  public String sellerGetAllOrder(Model model)\r\n    throws IOException, InterruptedException, JsonProcessingException {\r\n    HttpClient client = HttpClient.newHttpClient();\r\n    HttpRequest request = HttpRequest\r\n      .newBuilder()\r\n      .uri(URI.create(\"http://localhost:8080/apis/orders\"))\r\n      .build();\r\n    HttpResponse<String> response = client.send(\r\n      request,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n    String jsonStr = response.body();\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    List<OrderInfo> orderList = objectMapper.readValue(\r\n      jsonStr,\r\n      new TypeReference<List<OrderInfo>>() {}\r\n    );\r\n    System.out.println(orderList);\r\n    model.addAttribute(\"orderList\", orderList);\r\n    return \"seller/manageOrder\";\r\n  }\r\n\r\n  @GetMapping(\"/seller/manageCustomers\")\r\n  public String sellerGetAllCustomer(Model model)\r\n    throws IOException, InterruptedException, JsonProcessingException {\r\n    HttpClient client = HttpClient.newHttpClient();\r\n    HttpRequest request = HttpRequest\r\n      .newBuilder()\r\n      .uri(URI.create(\"http://localhost:8080/apis/customers\"))\r\n      .build();\r\n    HttpResponse<String> response = client.send(\r\n      request,\r\n      HttpResponse.BodyHandlers.ofString()\r\n    );\r\n    String jsonStr = response.body();\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    List<Customer> customerList = objectMapper.readValue(\r\n      jsonStr,\r\n      new TypeReference<List<Customer>>() {}\r\n    );\r\n    System.out.println(customerList);\r\n    model.addAttribute(\"customerList\", customerList);\r\n    return \"seller/manageCustomer\";\r\n  }\r\n}\r\n"
        }
    ]
}